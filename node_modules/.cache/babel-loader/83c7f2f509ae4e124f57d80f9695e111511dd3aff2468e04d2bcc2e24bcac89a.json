{"ast":null,"code":"// import React from 'react';\n// import './form.css';\n// import { useForm, useFieldArray } from 'react-hook-form';\n// import { supabase } from './supabase';\n\n// const ProductForm = () => {\n//   const { register, handleSubmit, control, formState: { errors } } = useForm({\n//     defaultValues: {\n//       title: '',\n//       details: '',\n//       price: '',\n//       image:null,\n//       addons: [{ image: null, title: '', price: '' }]\n//     }\n//   });\n\n//   const { fields, append, remove } = useFieldArray({\n//     control,\n//     name: 'addons'\n//   });\n\n//   const onSubmit = async (data) => {\n//     console.log(data)\n//     const {data:ProductImage, error:ProductImageError} = await supabase.storage.from(\"addon\").upload(`${data.title}-${data.details}`, data.image[0])\n//     if(ProductImageError) {\n//         console.log(ProductImageError);\n//         return;\n//     }\n//     const {data:Product, error} = await supabase.from(\"products\").insert({\n//         title:data.title,\n//         details:data.details,\n//         price:data.price,\n//         image:ProductImage.path,\n//     }).select().single();\n//     if (error) {\n//     console.log(error);\n//     return;\n//     }\n\n//     for(let addons in data.addons){\n//         const adf = data.addons[addons];\n//         console.log(adf)\n//         const {data:AddonFile, error:AddonFileError} = await supabase.storage.from(\"addon\").upload(`${Product.id}-${adf.title}`,adf.image[0]);\n//         if(AddonFileError){\n//             console.error(AddonFileError);\n//             await supabase.from(\"products\").delete().eq(\"id\",Product.id);\n//             break;\n//         }\n//         const { error:AddonError} = await supabase.from(\"addons\").insert({title:adf.title, price:adf.price, image:AddonFile.path, productid:Product.id});\n//         if(AddonError){\n//             console.error(AddonError);\n//             await supabase.from(\"products\").delete().eq(\"id\",Product.id);\n//             break;\n//         }\n//     }\n//   };\n\n//   return (\n//     <form className=\"\" onSubmit={handleSubmit(onSubmit)}>\n//       <div>\n//         <label>Title:</label>\n//         <input\n//           type=\"text\"\n//           {...register('title', { required: 'Title is required' })}\n//         />\n//         {errors.title && <p>{errors.title.message}</p>}\n//       </div>\n\n//       <div>\n//         <label>Details:</label>\n//         <textarea\n//           {...register('details', { required: 'Details are required' })}\n//         />\n//         {errors.details && <p>{errors.details.message}</p>}\n//       </div>\n\n//       <div>\n//         <label>Price:</label>\n//         <input\n//           type=\"number\"\n//           {...register('price', { required: 'Price is required' })}\n//         />\n//         {errors.price && <p>{errors.price.message}</p>}\n//       </div>\n//       <div>\n//       <label>Image:</label>\n//             <input\n//               type=\"file\"\n//               {...register(`image`, { required: 'Image is required' })}\n//             />\n//       </div>\n\n//       <div>\n//         <h3>Add-ons</h3>\n//         {fields.map((addon, index) => (\n//           <div key={addon.id}>\n//             <label>Image:</label>\n//             <input\n//               type=\"file\"\n//               {...register(`addons.${index}.image`, { required: 'Image is required' })}\n//             />\n//             {errors.addons?.[index]?.image && <p>{errors.addons[index].image.message}</p>}\n\n//             <label>Title:</label>\n//             <input\n//               type=\"text\"\n//               {...register(`addons.${index}.title`, { required: 'Addon title is required' })}\n//             />\n//             {errors.addons?.[index]?.title && <p>{errors.addons[index].title.message}</p>}\n\n//             <label>Price:</label>\n//             <input\n//               type=\"number\"\n//               {...register(`addons.${index}.price`, { required: 'Addon price is required' })}\n//             />\n//             {errors.addons?.[index]?.price && <p>{errors.addons[index].price.message}</p>}\n\n//             <button type=\"button\" onClick={() => remove(index)}>\n//               Remove Addon\n//             </button>\n//           </div>\n//         ))}\n\n//         <button\n//           type=\"button\"\n//           onClick={() => append({ image: null, title: '', price: '' })}\n//         >\n//           Add Addon\n//         </button>\n//       </div>\n\n//       <button type=\"submit\">Submit</button>\n//     </form>\n//   );\n// };\n\n// export default ProductForm;","map":{"version":3,"names":[],"sources":["C:/Users/hp/Desktop/jojo 1/bill-of-quantities/src/form.js"],"sourcesContent":["// import React from 'react';\r\n// import './form.css';\r\n// import { useForm, useFieldArray } from 'react-hook-form';\r\n// import { supabase } from './supabase';\r\n\r\n// const ProductForm = () => {\r\n//   const { register, handleSubmit, control, formState: { errors } } = useForm({\r\n//     defaultValues: {\r\n//       title: '',\r\n//       details: '',\r\n//       price: '',\r\n//       image:null,\r\n//       addons: [{ image: null, title: '', price: '' }]\r\n//     }\r\n//   });\r\n\r\n//   const { fields, append, remove } = useFieldArray({\r\n//     control,\r\n//     name: 'addons'\r\n//   });\r\n\r\n//   const onSubmit = async (data) => {\r\n//     console.log(data)\r\n//     const {data:ProductImage, error:ProductImageError} = await supabase.storage.from(\"addon\").upload(`${data.title}-${data.details}`, data.image[0])\r\n//     if(ProductImageError) {\r\n//         console.log(ProductImageError);\r\n//         return;\r\n//     }\r\n//     const {data:Product, error} = await supabase.from(\"products\").insert({\r\n//         title:data.title,\r\n//         details:data.details,\r\n//         price:data.price,\r\n//         image:ProductImage.path,\r\n//     }).select().single();\r\n//     if (error) {\r\n//     console.log(error);\r\n//     return;\r\n//     }\r\n      \r\n//     for(let addons in data.addons){\r\n//         const adf = data.addons[addons];\r\n//         console.log(adf)\r\n//         const {data:AddonFile, error:AddonFileError} = await supabase.storage.from(\"addon\").upload(`${Product.id}-${adf.title}`,adf.image[0]);\r\n//         if(AddonFileError){\r\n//             console.error(AddonFileError);\r\n//             await supabase.from(\"products\").delete().eq(\"id\",Product.id);\r\n//             break;\r\n//         }\r\n//         const { error:AddonError} = await supabase.from(\"addons\").insert({title:adf.title, price:adf.price, image:AddonFile.path, productid:Product.id});\r\n//         if(AddonError){\r\n//             console.error(AddonError);\r\n//             await supabase.from(\"products\").delete().eq(\"id\",Product.id);\r\n//             break;\r\n//         }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <form className=\"\" onSubmit={handleSubmit(onSubmit)}>\r\n//       <div>\r\n//         <label>Title:</label>\r\n//         <input\r\n//           type=\"text\"\r\n//           {...register('title', { required: 'Title is required' })}\r\n//         />\r\n//         {errors.title && <p>{errors.title.message}</p>}\r\n//       </div>\r\n\r\n//       <div>\r\n//         <label>Details:</label>\r\n//         <textarea\r\n//           {...register('details', { required: 'Details are required' })}\r\n//         />\r\n//         {errors.details && <p>{errors.details.message}</p>}\r\n//       </div>\r\n\r\n//       <div>\r\n//         <label>Price:</label>\r\n//         <input\r\n//           type=\"number\"\r\n//           {...register('price', { required: 'Price is required' })}\r\n//         />\r\n//         {errors.price && <p>{errors.price.message}</p>}\r\n//       </div>\r\n//       <div>\r\n//       <label>Image:</label>\r\n//             <input\r\n//               type=\"file\"\r\n//               {...register(`image`, { required: 'Image is required' })}\r\n//             />\r\n//       </div>\r\n\r\n//       <div>\r\n//         <h3>Add-ons</h3>\r\n//         {fields.map((addon, index) => (\r\n//           <div key={addon.id}>\r\n//             <label>Image:</label>\r\n//             <input\r\n//               type=\"file\"\r\n//               {...register(`addons.${index}.image`, { required: 'Image is required' })}\r\n//             />\r\n//             {errors.addons?.[index]?.image && <p>{errors.addons[index].image.message}</p>}\r\n\r\n//             <label>Title:</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               {...register(`addons.${index}.title`, { required: 'Addon title is required' })}\r\n//             />\r\n//             {errors.addons?.[index]?.title && <p>{errors.addons[index].title.message}</p>}\r\n\r\n//             <label>Price:</label>\r\n//             <input\r\n//               type=\"number\"\r\n//               {...register(`addons.${index}.price`, { required: 'Addon price is required' })}\r\n//             />\r\n//             {errors.addons?.[index]?.price && <p>{errors.addons[index].price.message}</p>}\r\n\r\n//             <button type=\"button\" onClick={() => remove(index)}>\r\n//               Remove Addon\r\n//             </button>\r\n//           </div>\r\n//         ))}\r\n\r\n//         <button\r\n//           type=\"button\"\r\n//           onClick={() => append({ image: null, title: '', price: '' })}\r\n//         >\r\n//           Add Addon\r\n//         </button>\r\n//       </div>\r\n\r\n//       <button type=\"submit\">Submit</button>\r\n//     </form>\r\n//   );\r\n// };\r\n\r\n// export default ProductForm;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}